export function ranging() {    let viewer = window.earth;    let AllEnities = []; //储存所有绘制对象    //测量距离    let isDraw = false;    let polyline = new Cesium.Entity();    let polylinePath = [];  //点集合    let LineEntities = [];//所有折现对象    let StartPoint;    let temLine = null;    let handler = viewer.screenSpaceEventHandler;    /***************************鼠标移动事件***********************************/    handler.setInputAction(function (movement) {        let position1;        let cartographic;        let ray = viewer.scene.camera.getPickRay(movement.endPosition);        if (ray)            position1 = viewer.scene.globe.pick(ray, viewer.scene);        if (position1)            cartographic = Cesium.Ellipsoid.WGS84.cartesianToCartographic(position1);        if (cartographic) {            //海拔            let height = viewer.scene.globe.getHeight(cartographic);            //地理坐标（弧度）转经纬度坐标            let point = Cesium.Cartesian3.fromDegrees(cartographic.longitude / Math.PI * 180, cartographic.latitude / Math.PI * 180, height);            if (isDraw) {                if (polylinePath.length < 1) {                    return;                }                if (temLine != null) //清除临时线                {                    viewer.entities.remove(temLine);                }                if (polylinePath.length == 1 && point.x != null) {                    temLine = viewer.entities.add({                        polyline: {                            show: true,                            positions: [polylinePath[0], point],                            material: new Cesium.PolylineOutlineMaterialProperty({                                color: Cesium.Color.RED                            }),                            width: 2                        }                    });                    AllEnities.push(temLine);                }            }        }    }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);    /***************************鼠标移动事件***********************************/    /***************************鼠标单击事件***********************************/    //完成画线操作    handler.setInputAction(function (movement) {        isDraw = true;        let position1;        let cartographic;        let ray = viewer.scene.camera.getPickRay(movement.position);        if (ray)            position1 = viewer.scene.globe.pick(ray, viewer.scene);        if (position1)            cartographic = Cesium.Ellipsoid.WGS84.cartesianToCartographic(position1);        //世界坐标转地理坐标（弧度）        if (cartographic) {            //海拔            let height = viewer.scene.globe.getHeight(cartographic);            //地理坐标（弧度）转经纬度坐标            let point = Cesium.Cartesian3.fromDegrees(cartographic.longitude / Math.PI * 180, cartographic.latitude / Math.PI * 180, height);            polylinePath.push(point); //加点            if (isDraw && polylinePath.length == 1) {                StartPoint = point;                let strartpoint = viewer.entities.add(                    {                        position: point,                        point: {                            heightReference: Cesium.HeightReference.CLAMP_TO_GROUND,                            show: true,                            color: Cesium.Color.SKYBLUE,                            pixelSize: 3,                            outlineColor: Cesium.Color.YELLOW,                            outlineWidth: 1                        },                    }                );                AllEnities.push(strartpoint);            }            if (isDraw && polylinePath.length > 1) {                let q1 = Cartesian3_to_WGS84({x: polylinePath[0].x, y: polylinePath[0].y, z: polylinePath[0].z})                let q2 = Cartesian3_to_WGS84({x: polylinePath[1].x, y: polylinePath[1].y, z: polylinePath[1].z})                let x = (q1.lat + q2.lat) / 2;                let y = (q1.lng + q2.lng) / 2;                labelPosition(x, y, 500, getLineDis(polylinePath[0], polylinePath[1]),)                let temppoint = viewer.entities.add(                    {                        position: point,                        point: {                            heightReference: Cesium.HeightReference.CLAMP_TO_GROUND,                            show: true,                            color: Cesium.Color.SKYBLUE,                            pixelSize: 3,                            outlineColor: Cesium.Color.YELLOW,                            outlineWidth: 1                        },                    }                );                AllEnities.push(temppoint);                polyline = viewer.entities.add({                    polyline: {                        show: true,                        positions: polylinePath,                        material: new Cesium.PolylineOutlineMaterialProperty({                            color: Cesium.Color.RED                        }),                        width: 2                    }                });                AllEnities.push(polyline);                LineEntities.push(polyline); //加直线                let lastpoint = polylinePath[polylinePath.length - 1];                polylinePath = [lastpoint];            }        }    }, Cesium.ScreenSpaceEventType.LEFT_CLICK);    /***************************鼠标单击事件***********************************/    /***************************鼠标双击事件***********************************/    handler.setInputAction(function () {        handler.removeInputAction(Cesium.ScreenSpaceEventType.LEFT_CLICK);        handler.removeInputAction(Cesium.ScreenSpaceEventType.LEFT_DOUBLE_CLICK);        AllEnities.push(polyline);        viewer.trackedEntity = undefined;        isDraw = false;        polylinePath = [];    }, Cesium.ScreenSpaceEventType.RIGHT_CLICK);    /***************************鼠标双击事件***********************************/    //获取俩点的距离，返回公里单位值    function getLineDis(startPoint, endPoint) {        let x2 = (endPoint.x - startPoint.x) * (endPoint.x - startPoint.x)        let y2 = (endPoint.y - startPoint.y) * (endPoint.y - startPoint.y);        let dis = Math.sqrt(x2 + y2);        return dis.toFixed(2);    }    //添加线段文字    function labelPosition(x, y, h, gap) {        let ll = new Cesium.Cartographic.fromDegrees(Number(y), Number(x));        let height = viewer.scene.globe.getHeight(ll);        let label = new Cesium.Entity({            position: Cesium.Cartesian3.fromDegrees(y, x, Number(height)+1),            name: "坐标",            label: {                text: gap + "m",//文字 string                font: "12pt monospace",//字体大小 string                fillColor: Cesium.Color.fromCssColorString("rgba(255,255,0,1)"),                style: Cesium.LabelStyle.FILL,                outlineWidth: 2,                verticalOrigin: Cesium.VerticalOrigin.BOTTOM,            },        });        earth.entities.add(label);    }    // //笛卡尔坐标系转WGS84坐标系    function Cartesian3_to_WGS84(point) {        let cartesian33 = new Cesium.Cartesian3(point.x, point.y, point.z);        let cartographic = Cesium.Cartographic.fromCartesian(cartesian33);        let lat = Cesium.Math.toDegrees(cartographic.latitude);        let lng = Cesium.Math.toDegrees(cartographic.longitude);        let alt = cartographic.height;        alt = cartographic.height;        return {lat: lat, lng: lng, alt: alt};    }}