// const Snow = `// uniform sampler2D colorTexture; //输入的场景渲染照片// varying vec2 v_textureCoordinates;//// float snow(vec2 uv, float scale) {//     float time = czm_frameNumber / 60.0;//     float w = smoothstep(1., 0., -uv.y * (scale / 10.));//     if (w < .1)//         return 0.;//     uv += time / scale;//     uv.y += time * 2. / scale;//     uv.x += sin(uv.y + time * .5) / scale;//     uv *= scale;//     vec2 s = floor(uv), f = fract(uv), p;//     float k = 3., d;//     p = .5 + .35 * sin(11. * fract(sin((s + p + scale) * mat2(7, 3, 6, 5)) * 5.)) - f;//     d = length(p);//     k = min(d, k);//     k = smoothstep(0., k, sin(f.x + f.y) * 0.01);//     return k * w;// }//// void main(void) {//     vec2 resolution = czm_viewport.zw;//     vec2 uv = (gl_FragCoord.xy * 2. - resolution.xy) / min(resolution.x, resolution.y);//     vec3 finalColor = vec3(0);//     // float c=smoothstep(1.,0.3,clamp(uv.y*.3+.8,0.,.75));//     float c = 0.0;//     c += snow(uv, 30.) * .0;//     c += snow(uv, 20.) * .0;//     c += snow(uv, 15.) * .0;//     c += snow(uv, 10.);//     c += snow(uv, 8.);//     c += snow(uv, 6.);//     c += snow(uv, 5.);//     finalColor = (vec3(c));                                                                      //屏幕上雪的颜色//     gl_FragColor = mix(texture2D(colorTexture, v_textureCoordinates), vec4(finalColor, 1), 0.5); //将雪和三维场景融合// }// `;//// const Rain = `// uniform sampler2D colorTexture; //输入的场景渲染照片// varying vec2 v_textureCoordinates;//// float hash(float x) { return fract(sin(x * 133.3) * 13.13); }//// void main(void) {////     float time = czm_frameNumber / 60.0;//     vec2 resolution = czm_viewport.zw;////     vec2 uv = (gl_FragCoord.xy * 2. - resolution.xy) / min(resolution.x, resolution.y);//     vec3 c = vec3(.6, .7, .8);////     float a = -.4;//     float si = sin(a), co = cos(a);//     uv *= mat2(co, -si, si, co);//     uv *= length(uv + vec2(0, 4.9)) * .3 + 1.;////     float v = 1. - sin(hash(floor(uv.x * 100.)) * 2.);//     float b = clamp(abs(sin(20. * time * v + uv.y * (5. / (2. + v)))) - .95, 0., 1.) * 20.;//     c *= v * b; //屏幕上雨的颜色////     gl_FragColor = mix(texture2D(colorTexture, v_textureCoordinates), vec4(c, 1), 0.5); //将雨和三维场景融合// }// `;// export function createSnowStage(e) {//     let viewer = window.earth;//     let snow=null;//     if (e) {//         snow = new Cesium.PostProcessStage({//             name: 'czm_snow',//             fragmentShader: Snow//         });//         let collection = viewer.scene.postProcessStages;//         collection.add(snow);//         viewer.scene.skyAtmosphere.hueShift = -0.8;//         viewer.scene.skyAtmosphere.saturationShift = -0.7;//         viewer.scene.skyAtmosphere.brightnessShift = -0.33;//         viewer.scene.fog.density = 0.001;//         viewer.scene.fog.minimumBrightness = 0.8;//     } else {//         viewer.scene.postProcessStages.removeAll()//     }// }//// export function createRainStage(e) {//     let viewer = window.earth;//     let rain=null;//     if (e) {//         rain= new Cesium.PostProcessStage({//             name: 'czm_rain',//             fragmentShader: Rain//         });//         let collection = viewer.scene.postProcessStages;//         collection.add(rain);//         viewer.scene.skyAtmosphere.hueShift = -0.8;//         viewer.scene.skyAtmosphere.saturationShift = -0.7;//         viewer.scene.skyAtmosphere.brightnessShift = -0.33;//         viewer.scene.fog.density = 0.001;//         viewer.scene.fog.minimumBrightness = 0.8;//     } else {//         viewer.scene.postProcessStages.removeAll()//     }// }let snowSystem;let rainSystem;//雪export function createSnowStage(value) {    //粒子系统    let viewer = window.earth;    let scene = viewer.scene;    scene.globe.depthTestAgainstTerrain = true;    let resetCameraFunction = function () {        scene.camera.setView({            destination: new Cesium.Cartesian3.fromDegrees(Number(value.x), Number(value.y), Number(value.z)),//中心经纬度            orientation: {                heading: Cesium.Math.toRadians(0.0),                pitch: Cesium.Math.toRadians(-60.0),//从上往下看为-90                roll: 0            }        });    };    resetCameraFunction();// snow    let snowParticleSize =value.particleSize; //单个粒子大小    let snowRadius =value.radius;   //范围大小    let minimumSnowImageSize = new Cesium.Cartesian2(        snowParticleSize,        snowParticleSize    );    let maximumSnowImageSize = new Cesium.Cartesian2(        snowParticleSize * 2.0,        snowParticleSize * 2.0    );    let snowGravityScratch = new Cesium.Cartesian3();    let snowUpdate = function (particle) {        snowGravityScratch = Cesium.Cartesian3.normalize(            particle.position,            snowGravityScratch        );        Cesium.Cartesian3.multiplyByScalar(            snowGravityScratch,            Cesium.Math.randomBetween(-30.0, -300.0),            snowGravityScratch        );        particle.velocity = Cesium.Cartesian3.add(            particle.velocity,            snowGravityScratch,            particle.velocity        );    };    snowSystem = new Cesium.ParticleSystem({        modelMatrix: new Cesium.Matrix4.fromTranslation(            scene.camera.position        ),        minimumSpeed: -1.0,        maximumSpeed: 0.0,        lifetime: 15.0,        emitter: new Cesium.SphereEmitter(snowRadius),        startScale: 0.5,        endScale: 1.0,        image:value.image, //粒子图片        emissionRate: value.emissionRate, //粒子密度        startColor: Cesium.Color.WHITE.withAlpha(0.6),        endColor: Cesium.Color.WHITE.withAlpha(1.0),        minimumImageSize: minimumSnowImageSize,        maximumImageSize: maximumSnowImageSize,        updateCallback: snowUpdate,    });    scene.primitives.add(snowSystem);}//雨export function createRainStage(value) {    let viewer = window.earth;    let scene = viewer.scene;    scene.globe.depthTestAgainstTerrain = true;    let resetCameraFunction = function () {        scene.camera.setView({            destination: new Cesium.Cartesian3.fromDegrees(Number(value.x), Number(value.y), Number(value.z)),//中心经纬度            orientation: {                heading: Cesium.Math.toRadians(0.0),                pitch: Cesium.Math.toRadians(-60.0),//从上往下看为-90                roll: 0            }        });    };    resetCameraFunction();// rain    let rainParticleSize = value.particleSize; //单个粒子大小    let rainRadius = value.radius;   //范围大小    let rainImageSize = new Cesium.Cartesian2(        rainParticleSize,        rainParticleSize * 2.0    );    let rainGravityScratch = new Cesium.Cartesian3();    let rainUpdate = function (particle) {        rainGravityScratch = Cesium.Cartesian3.normalize(            particle.position,            rainGravityScratch        );        rainGravityScratch = Cesium.Cartesian3.multiplyByScalar(            rainGravityScratch,            -1050.0,            rainGravityScratch        );        particle.position = Cesium.Cartesian3.add(            particle.position,            rainGravityScratch,            particle.position        );    };    rainSystem = new Cesium.ParticleSystem({        modelMatrix: new Cesium.Matrix4.fromTranslation(            scene.camera.position        ),        speed: -1.0,        lifetime: 15.0,        emitter: new Cesium.SphereEmitter(rainRadius),        startScale: 1.0,        endScale: 0.0,        image:value.image, //粒子图片        emissionRate: value.emissionRate, //粒子密度        startColor: new Cesium.Color(0.27, 0.5, 0.7, 1.0),        endColor: new Cesium.Color(0.27, 0.5, 0.7, 1.0),        imageSize: rainImageSize,        updateCallback: rainUpdate,    });    scene.primitives.add(rainSystem);}export function offWeather() {    if (rainSystem) {        window.earth.scene.primitives.remove(rainSystem);    }    if (snowSystem) {        window.earth.scene.primitives.remove(snowSystem)    }}// button//     Sandcastle.addToolbarButton("Reset Camera", resetCameraFunction);//// // drop down//     let options = [//         {//             text: "Snow",//             onselect: function () {//                 rainSystem.show = false;//                 snowSystem.show = true;////                 scene.skyAtmosphere.hueShift = -0.8;//                 scene.skyAtmosphere.saturationShift = -0.7;//                 scene.skyAtmosphere.brightnessShift = -0.33;////                 scene.fog.density = 0.001;//                 scene.fog.minimumBrightness = 0.8;//             },//         },//         {//             text: "Rain",//             onselect: function () {//                 rainSystem.show = true;//                 snowSystem.show = false;////                 scene.skyAtmosphere.hueShift = -0.97;//                 scene.skyAtmosphere.saturationShift = 0.25;//                 scene.skyAtmosphere.brightnessShift = -0.4;////                 scene.fog.density = 0.00025;//                 scene.fog.minimumBrightness = 0.01;//             },//         },//     ];//     Sandcastle.addToolbarMenu(options);